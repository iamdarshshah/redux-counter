{"version":3,"sources":["index.js"],"names":["intialState","count","store","createStore","state","arguments","length","undefined","action","type","Counter","_this$props","this","props","increment","decrement","reset","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","Component","mapDispatchToProps","CounterContainer","connect","render","react_redux__WEBPACK_IMPORTED_MODULE_8__","document","getElementById"],"mappings":"qNAOMA,SAAc,CAClBC,MAAO,IAyCHC,EAAQC,YAtBE,WAAiC,IAAhCC,EAAgCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBL,EAAaQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,MAjBgB,cAiBZC,EAAOC,KACF,CACLR,MAAOG,EAAMH,MAAQ,GAlBT,cAsBZO,EAAOC,KACF,CACLR,MAAOG,EAAMH,MAAQ,GAvBb,UA2BRO,EAAOC,KACF,CACLR,MAAO,GAIJG,IAKHM,mLACK,IAAAC,EACwCC,KAAKC,MAA5CZ,EADDU,EACCV,MAAOa,EADRH,EACQG,UAAWC,EADnBJ,EACmBI,UAAWC,EAD9BL,EAC8BK,MACrC,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASnB,GACtBgB,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,UAAQE,QAASP,GAAjB,aACAG,EAAAC,EAAAC,cAAA,UAAQE,QAASN,GAAjB,aACAE,EAAAC,EAAAC,cAAA,UAAQE,QAASL,GAAjB,kBATYM,aAoBhBC,EAAqB,CACzBT,UAzDgB,iBAAO,CACvBL,KALgB,cA8DhBM,UAtDgB,iBAAO,CACvBN,KARgB,cA8DhBO,MAnDY,iBAAO,CACnBP,KAXY,WAgERe,EAAmBC,YAVD,SAAArB,GACtB,OAAOA,GASyCmB,EAAzBE,CAA6Cf,GAEtEgB,iBACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAUzB,MAAOA,GACfe,EAAAC,EAAAC,cAACK,EAAD,OAEFI,SAASC,eAAe","file":"static/js/main.d0230fd1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { createStore, bindActionCreators } from 'redux';\r\nimport { connect, Provider } from 'react-redux';\r\n\r\nimport './styles.scss';\r\n\r\nconst intialState = {\r\n  count: 0,\r\n};\r\n\r\nconst INCREMENT = 'INCREMENT';\r\nconst DECREMENT = 'DECREMENT';\r\nconst RESET = 'RESET';\r\n\r\nconst increment = () => ({\r\n  type: INCREMENT,\r\n});\r\n\r\nconst decrement = () => ({\r\n  type: DECREMENT,\r\n});\r\n\r\nconst reset = () => ({\r\n  type: RESET,\r\n});\r\n\r\nconst reducer = (state = intialState, action) => {\r\n  if (action.type === INCREMENT) {\r\n    return {\r\n      count: state.count + 1,\r\n    };\r\n  }\r\n\r\n  if (action.type === DECREMENT) {\r\n    return {\r\n      count: state.count - 1,\r\n    };\r\n  }\r\n\r\n  if (action.type === RESET) {\r\n    return {\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const { count, increment, decrement, reset } = this.props;\r\n    return (\r\n      <main className=\"Counter\">\r\n        <p className=\"count\">{count}</p>\r\n        <section className=\"controls\">\r\n          <button onClick={increment}>Increment</button>\r\n          <button onClick={decrement}>Decrement</button>\r\n          <button onClick={reset}>Reset</button>\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  increment,\r\n  decrement,\r\n  reset,\r\n};\r\n\r\nconst CounterContainer = connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <CounterContainer />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}